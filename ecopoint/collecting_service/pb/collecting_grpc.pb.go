// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/collecting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectingService_CreateOrder_FullMethodName         = "/ecopoint.collecting.v1.CollectingService/CreateOrder"
	CollectingService_ListAvailableOrders_FullMethodName = "/ecopoint.collecting.v1.CollectingService/ListAvailableOrders"
	CollectingService_AcceptOrder_FullMethodName         = "/ecopoint.collecting.v1.CollectingService/AcceptOrder"
	CollectingService_UpdateOrderStatus_FullMethodName   = "/ecopoint.collecting.v1.CollectingService/UpdateOrderStatus"
	CollectingService_GetOrder_FullMethodName            = "/ecopoint.collecting.v1.CollectingService/GetOrder"
	CollectingService_ListMyActiveOrders_FullMethodName  = "/ecopoint.collecting.v1.CollectingService/ListMyActiveOrders"
	CollectingService_ListMyOrders_FullMethodName        = "/ecopoint.collecting.v1.CollectingService/ListMyOrders"
)

// CollectingServiceClient is the client API for CollectingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectingServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	ListAvailableOrders(ctx context.Context, in *ListAvailableOrdersRequest, opts ...grpc.CallOption) (*ListAvailableOrdersResponse, error)
	AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*Order, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*Order, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
	ListMyActiveOrders(ctx context.Context, in *ListMyActiveOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	ListMyOrders(ctx context.Context, in *ListMyOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
}

type collectingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectingServiceClient(cc grpc.ClientConnInterface) CollectingServiceClient {
	return &collectingServiceClient{cc}
}

func (c *collectingServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CollectingService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectingServiceClient) ListAvailableOrders(ctx context.Context, in *ListAvailableOrdersRequest, opts ...grpc.CallOption) (*ListAvailableOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableOrdersResponse)
	err := c.cc.Invoke(ctx, CollectingService_ListAvailableOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectingServiceClient) AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CollectingService_AcceptOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectingServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CollectingService_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectingServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CollectingService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectingServiceClient) ListMyActiveOrders(ctx context.Context, in *ListMyActiveOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, CollectingService_ListMyActiveOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectingServiceClient) ListMyOrders(ctx context.Context, in *ListMyOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, CollectingService_ListMyOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectingServiceServer is the server API for CollectingService service.
// All implementations must embed UnimplementedCollectingServiceServer
// for forward compatibility.
type CollectingServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	ListAvailableOrders(context.Context, *ListAvailableOrdersRequest) (*ListAvailableOrdersResponse, error)
	AcceptOrder(context.Context, *AcceptOrderRequest) (*Order, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*Order, error)
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	ListMyActiveOrders(context.Context, *ListMyActiveOrdersRequest) (*ListOrdersResponse, error)
	ListMyOrders(context.Context, *ListMyOrdersRequest) (*ListOrdersResponse, error)
	mustEmbedUnimplementedCollectingServiceServer()
}

// UnimplementedCollectingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectingServiceServer struct{}

func (UnimplementedCollectingServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedCollectingServiceServer) ListAvailableOrders(context.Context, *ListAvailableOrdersRequest) (*ListAvailableOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableOrders not implemented")
}
func (UnimplementedCollectingServiceServer) AcceptOrder(context.Context, *AcceptOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrder not implemented")
}
func (UnimplementedCollectingServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedCollectingServiceServer) GetOrder(context.Context, *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedCollectingServiceServer) ListMyActiveOrders(context.Context, *ListMyActiveOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyActiveOrders not implemented")
}
func (UnimplementedCollectingServiceServer) ListMyOrders(context.Context, *ListMyOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyOrders not implemented")
}
func (UnimplementedCollectingServiceServer) mustEmbedUnimplementedCollectingServiceServer() {}
func (UnimplementedCollectingServiceServer) testEmbeddedByValue()                           {}

// UnsafeCollectingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectingServiceServer will
// result in compilation errors.
type UnsafeCollectingServiceServer interface {
	mustEmbedUnimplementedCollectingServiceServer()
}

func RegisterCollectingServiceServer(s grpc.ServiceRegistrar, srv CollectingServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectingService_ServiceDesc, srv)
}

func _CollectingService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectingService_ListAvailableOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).ListAvailableOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_ListAvailableOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).ListAvailableOrders(ctx, req.(*ListAvailableOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectingService_AcceptOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).AcceptOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_AcceptOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).AcceptOrder(ctx, req.(*AcceptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectingService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectingService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectingService_ListMyActiveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyActiveOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).ListMyActiveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_ListMyActiveOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).ListMyActiveOrders(ctx, req.(*ListMyActiveOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectingService_ListMyOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectingServiceServer).ListMyOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectingService_ListMyOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectingServiceServer).ListMyOrders(ctx, req.(*ListMyOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectingService_ServiceDesc is the grpc.ServiceDesc for CollectingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecopoint.collecting.v1.CollectingService",
	HandlerType: (*CollectingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _CollectingService_CreateOrder_Handler,
		},
		{
			MethodName: "ListAvailableOrders",
			Handler:    _CollectingService_ListAvailableOrders_Handler,
		},
		{
			MethodName: "AcceptOrder",
			Handler:    _CollectingService_AcceptOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _CollectingService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _CollectingService_GetOrder_Handler,
		},
		{
			MethodName: "ListMyActiveOrders",
			Handler:    _CollectingService_ListMyActiveOrders_Handler,
		},
		{
			MethodName: "ListMyOrders",
			Handler:    _CollectingService_ListMyOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/collecting.proto",
}
